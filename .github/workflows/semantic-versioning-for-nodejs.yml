name: Check for new changes

on: 
  workflow_call:

    secrets:
      PACKAGE_TOKEN:
        required: false

    inputs:
      USE_PACKAGE_TOKEN:
        type: boolean
        required: true
      BRANCH_NAME:
        type: string
        description: "Branch name"
        required: true
      MAJOR_TAG_LIST:
        type: string
        description: "List of tags for MAJOR changes, separated by commas"
        required: true
      MINOR_TAG_LIST:
        type: string
        description: "List of tags for MINOR changes, separated by commas"
        required: true
      PATH_TAG_LIST:
        type: string
        description: "List of tags for PATCH changes, separated by commas"
        required: true

    outputs:
      LAST_VERSION:
        description: "Stores the last generated tag or 0.0.0 if itâ€™s the first version release"
        value: ${{ jobs.check-changes.outputs.LAST_VERSION }}
      NEW_VERSION:
        description: "Stores the new version generated by this workflow"
        value: ${{ jobs.check-changes.outputs.NEW_VERSION }}

jobs:
  check-changes:
    name: Check for new changes
    runs-on: ubuntu-latest

    if: ${{ github.ref == format('refs/heads/{0}', inputs.BRANCH_NAME) }}

    outputs:
      LAST_VERSION: ${{ steps.get_version.outputs.LAST_VERSION }}
      NEW_VERSION: ${{ steps.generate_tag_release.outputs.NEW_VERSION }}

    steps:
      - name: Checkout With Package Token
        if: ${{ inputs.USE_PACKAGE_TOKEN }}
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PACKAGE_TOKEN }}
          fetch-depth: 0
          ref:  ${{ inputs.BRANCH_NAME }}

      - name: Checkout Without Package Token
        if: ${{ !inputs.USE_PACKAGE_TOKEN }}
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref:  ${{ inputs.BRANCH_NAME }}

      - name: Get Version from package.json
        id: get_version
        run: |
          VERSION=$(grep -o '"version": "[^"]*' package.json | cut -d'"' -f4)
          echo "::set-output name=LAST_VERSION::$VERSION"

      - name: Check for unreleased commits
        id: check_commits_without_release
        run: |
          COMMITS_WITHOUT_RELEASE=$(git log --left-only --right-only ${LAST_VERSION}..HEAD --no-merges --format=%H)
          
          if [ -n "$COMMITS_WITHOUT_RELEASE" ]; then
            echo "There are commits without a release"
            echo "::set-output name=COMMITS_WITHOUT_RELEASE::true"
          else
            echo "There are no commits without a release"
            echo "::set-output name=COMMITS_WITHOUT_RELEASE::false"
          fi

      - name: Generate tag release
        id: generate_tag_release
        if: steps.check_commits_without_release.outputs.COMMITS_WITHOUT_RELEASE == 'true'
        run: |
          LAST_VERSION=${{ steps.get_version.outputs.LAST_VERSION }}
          LAST_MAJOR_VERSION=$(echo "$LAST_VERSION" | cut -d. -f1)
          LAST_MINOR_VERSION=$(echo "$LAST_VERSION" | cut -d. -f2)
          LAST_PATCH_VERSION=$(echo "$LAST_VERSION" | cut -d. -f3)

          IFS=',' read -r -a MAJOR_TAG_LIST <<< "${{ inputs.MAJOR_TAG_LIST }}"
          IFS=',' read -r -a MINOR_TAG_LIST <<< "${{ inputs.MINOR_TAG_LIST }}"
          IFS=',' read -r -a PATH_TAG_LIST <<< "${{ inputs.PATH_TAG_LIST }}"

          COMMITS_WITHOUT_RELEASE=$(git log --left-only --right-only ${LAST_VERSION}..HEAD --no-merges --format=%H)
          COMMIT_MESSAGES=$(git log --format=%s $COMMITS_WITHOUT_RELEASE)

          for TAG in "${MAJOR_TAG_LIST[@]}"; do
            if echo "$COMMIT_MESSAGES" | grep -Eq "(${TAG})(\([^)]*\))?!:"; then
              NEW_VERSION="$((LAST_MAJOR_VERSION + 1)).0.0"
              break
            fi
          done
          
          if [ -z "$NEW_VERSION" ]; then
            for TAG in "${MINOR_TAG_LIST[@]}"; do
              if echo "$COMMIT_MESSAGES" | grep -Eq "(${TAG})(\([^)]*\))?:"; then
                NEW_VERSION="$LAST_MAJOR_VERSION.$((LAST_MINOR_VERSION + 1)).0"
                break
              fi
            done
          fi
          
          if [ -z "$NEW_VERSION" ]; then
            for TAG in "${PATH_TAG_LIST[@]}"; do
              if echo "$COMMIT_MESSAGES" | grep -Eq "(${TAG})(\([^)]*\))?:"; then
                NEW_VERSION="$LAST_MAJOR_VERSION.$LAST_MINOR_VERSION.$((LAST_PATCH_VERSION + 1))"
                break
              fi
            done
          fi
          
          if [ -z "$NEW_VERSION" ]; then
            echo "No commit in this push will generate a new release."
            exit 0
          fi
          
          echo "New version: $NEW_VERSION"
          echo "::set-output name=NEW_VERSION::$NEW_VERSION"

name: Check for new changes

on: 
  workflow_call:

    secrets:
      PACKAGE_TOKEN:
        required: false

    inputs:
      USE_PACKAGE_TOKEN:
        type: boolean
        required: true
      BRANCH_NAME:
        type: string
        description: "Branch name"
        required: true
      MAJOR_TAG_LIST:
        type: string
        description: "List of tags for MAJOR changes, separated by commas"
        required: true
      MINOR_TAG_LIST:
        type: string
        description: "List of tags for MINOR changes, separated by commas"
        required: true
      PATH_TAG_LIST:
        type: string
        description: "List of tags for PATCH changes, separated by commas"
        required: true
      TAG_PREFIX:
        type: string
        description: "Prefix for the version tag"
        required: true  # Defina como true se você quiser torná-lo obrigatório

    outputs:
      CURRENT_VERSION:
        description: "Stores the last generated tag or 0.0.0 if it’s the first version release"
        value: ${{ jobs.check-changes.outputs.CURRENT_VERSION }}
      NEW_VERSION:
        description: "Stores the new version generated by this workflow"
        value: ${{ jobs.check-changes.outputs.NEW_VERSION }}

jobs:
  release:
    name: Check for new changes
    runs-on: ubuntu-latest

    if: ${{ github.ref == format('refs/heads/{0}', inputs.BRANCH_NAME) }}

    outputs:
      CURRENT_VERSION: ${{ steps.get_version.outputs.CURRENT_VERSION }}
      NEW_VERSION: ${{ steps.generate_tag_release.outputs.NEW_VERSION }}

    steps:
      - name: Checkout With Package Token
        id: checkout_with_package_token
        if: ${{ inputs.USE_PACKAGE_TOKEN }}
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PACKAGE_TOKEN }}
          fetch-depth: 0
          ref:  ${{ inputs.BRANCH_NAME }}

      - name: Checkout Without Package Token
        id: checkout_without_package_token
        if: ${{ !inputs.USE_PACKAGE_TOKEN }}
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref:  ${{ inputs.BRANCH_NAME }}

      - name: Get current version from package.json
        id: get_version
        run: |
          set -e
          set -o pipefail

          VERSION=$(grep -o '"version": "[^"]*' package.json | cut -d'"' -f4)
          VERSION_NO_PREFIX="${VERSION#${{ inputs.TAG_PREFIX }}}"

          echo $VERSION_NO_PREFIX
          echo "CURRENT_VERSION=$VERSION_NO_PREFIX" >> $GITHUB_ENV

      - name: Check is first release
        id: check_is_first_release
        run: |
          TAG_ALREADY_EXISTS=$(git tag --list)
          if [ -z "$TAG_ALREADY_EXISTS" ]; then
            echo "IS_FIRST_RELEASE=true" >> $GITHUB_ENV
          else
            echo "IS_FIRST_RELEASE=false" >> $GITHUB_ENV
          fi
      
      - name: Get commits
        id: get_commits
        run: |
          IS_FIRS_RELEASE=${{ env.IS_FIRST_RELEASE }}
          echo $IS_FIRS_RELEASE

          if [ "$IS_FIRS_RELEASE" == "true" ]; then
            echo "First release."
            COMMITS=$(git log --format=%H)
            echo "$COMMITS=$COMMITS >> $GITHUB_ENV"
          else
            CURRENT_VERSION=${{ env.CURRENT_VERSION }}
            echo "current version $CURRENT_VERSION"

            COMMITS=$(git log ${CURRENT_VERSION}..HEAD --no-merges --format=%H)

            echo "$COMMITS=$COMMITS >> $GITHUB_ENV"
          fi

      - name: Generate tag release
        id: generate_tag_release
        if: steps.check_commits_without_release.outputs.COMMITS != ''
        run: |
          CURRENT_VERSION=${{ steps.get_version.outputs.CURRENT_VERSION }}
          LAST_MAJOR_VERSION=$(echo "$CURRENT_VERSION" | cut -d. -f1)
          LAST_MINOR_VERSION=$(echo "$CURRENT_VERSION" | cut -d. -f2)
          LAST_PATCH_VERSION=$(echo "$CURRENT_VERSION" | cut -d. -f3)

          IFS=',' read -r -a MAJOR_TAG_LIST <<< "${{ inputs.MAJOR_TAG_LIST }}"
          IFS=',' read -r -a MINOR_TAG_LIST <<< "${{ inputs.MINOR_TAG_LIST }}"
          IFS=',' read -r -a PATH_TAG_LIST <<< "${{ inputs.PATH_TAG_LIST }}"

          COMMITS=${{ steps.get_commits.outputs.COMMITS }}
          COMMIT_MESSAGES=$(git log --format=%s $COMMITS)

          for TAG in "${MAJOR_TAG_LIST[@]}"; do
            if echo "$COMMIT_MESSAGES" | grep -Eq "(${TAG})(\([^)]*\))?!:"; then
              NEW_VERSION="${{ inputs.TAG_PREFIX }}$((LAST_MAJOR_VERSION + 1)).0.0"
              break
            fi
          done
          
          if [ -z "$NEW_VERSION" ]; then
            for TAG in "${MINOR_TAG_LIST[@]}"; do
              if echo "$COMMIT_MESSAGES" | grep -Eq "(${TAG})(\([^)]*\))?:"; then
                NEW_VERSION="${{ inputs.TAG_PREFIX }}$LAST_MAJOR_VERSION.$((LAST_MINOR_VERSION + 1)).0"
                break
              fi
            done
          fi
          
          if [ -z "$NEW_VERSION" ]; then
            for TAG in "${PATH_TAG_LIST[@]}"; do
              if echo "$COMMIT_MESSAGES" | grep -Eq "(${TAG})(\([^)]*\))?:"; then
                NEW_VERSION="${{ inputs.TAG_PREFIX }}$LAST_MAJOR_VERSION.$LAST_MINOR_VERSION.$((LAST_PATCH_VERSION + 1))"
                break
              fi
            done
          fi
          
          if [ -z "$NEW_VERSION" ]; then
            echo "No commit in this push will generate a new release."
            exit 0
          fi
          
          echo "New version: $NEW_VERSION"
          echo "::set-output name=NEW_VERSION::$NEW_VERSION"
